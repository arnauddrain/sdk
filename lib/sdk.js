// Generated by CoffeeScript 1.10.0
(function() {
  var argv, baseDir, config, configPath, cson, e, error, fs, loadConfig, needle, path, ref, script, updateScript, watch;

  fs = require('fs');

  path = require('path');

  cson = require('cson');

  needle = require('needle');

  watch = require('node-watch');

  argv = require('yargs').argv;

  script = ((ref = argv._) != null ? ref[0] : void 0) || null;

  configPath = argv.c || 'phantombuster.cson';

  loadConfig = function(configPath) {
    return cson.load(configPath);
  };

  try {
    configPath = fs.realpathSync(configPath);
    baseDir = path.dirname(configPath);
    config = loadConfig(configPath);
    updateScript = function(updatedPath) {
      var account, i, len, localScript, pbScript, ref1;
      for (i = 0, len = config.length; i < len; i++) {
        account = config[i];
        ref1 = account.scripts;
        for (pbScript in ref1) {
          localScript = ref1[pbScript];
          if (path.join(baseDir, localScript) === updatedPath) {
            fs.readFile(updatedPath, function(err, text) {
              var options, payload;
              if (err) {
                return console.log("[" + account.name + "] " + updatedPath + ": " + (err.toString()));
              } else {
                options = {
                  headers: {
                    'X-Phantombuster-Key-1': account.apiKey
                  }
                };
                payload = {
                  text: text.toString()
                };
                return needle.post("https://phantombuster.com/api/v1/script/" + pbScript, payload, options, function(err, res) {
                  var ref2, ref3, ref4;
                  if (err) {
                    return console.log("[" + account.name + "] " + updatedPath + ": " + (err.toString()));
                  } else {
                    if (((ref2 = res.body) != null ? ref2.status : void 0) === 'success') {
                      if (typeof res.body.data === 'number') {
                        return console.log("[" + account.name + "] " + updatedPath + ": New script " + pbScript + " created");
                      } else {
                        return console.log("[" + account.name + "] " + updatedPath + ": Script " + pbScript + " updated");
                      }
                    } else {
                      return console.log("[" + account.name + "] " + updatedPath + ": " + (((ref3 = res.body) != null ? ref3.status : void 0) != null ? res.body.status : "Error") + ": " + (((ref4 = res.body) != null ? ref4.message : void 0) != null ? res.body.message : "HTTP " + res.statusCode));
                    }
                  }
                });
              }
            });
            return;
          }
        }
      }
    };
    if (script) {
      updateScript(fs.realpathSync(script));
    } else {
      watch(baseDir, function(updatedPath) {
        if (updatedPath === configPath) {
          config = loadConfig(updatedPath);
          return console.log(updatedPath + ": Configuration reloaded");
        } else {
          return updateScript(updatedPath);
        }
      });
    }
  } catch (error) {
    e = error;
    console.log(e.toString());
    process.exit(1);
  }

}).call(this);
